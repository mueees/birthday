var _ = require('underscore'),
    fs = require('fs'),
    async = require('async'),
    config = require('config'),
    Utility = require('libs/utility'),
    path = require('path');

var root = "./public";

function FsWorker(){}
_.extend(FsWorker.prototype, {

    existsList: function(paths, callback){
        async.map(paths, fs.exists, function(results){
            callback(null, results);
        });
    },

    /**
     * get all file and folder from dir with file info
     * @param dir {String} String like '/img/blog'
     * @param cb {Function} This is callback
     **/
    listDirWithInfo: function(dir, cb){
        var _this = this;
        fs.readdir(dir, function(err, list){
            if (err) return cb(err);
            _this._listDirWithInfo( list, dir, cb )
        });
    },

    /**
     * @param list {Array} Array with name files
     * @param dir {String} String like '/img/blog'
     * @param cb {Function} This is callback
     * */
    _listDirWithInfo: function(list, dir, cb){

        var pending = list.length;
        var results = [],
            _this = this;
        if (!pending) return cb(null, results);

        list.forEach(function(file){

            var filePath = dir + "/" + file;

            fs.stat(filePath, function(err, stat){
                if (err) return cb(err);
                stat['path'] = Utility.clearRoot(filePath);
                stat['name'] = file;
                stat['isDirectory'] = stat.isDirectory();
                results.push(stat);
                if (!--pending) cb(null, results);
            });
        });

    },

    /**
     * Make dir recursive
     * @param dirPath {String} String like '/img/blog'
     * @param mode {Number} 0007
     * @param callback {Function}
     * @param position {Number}
     * */
    makeDir: function(dirPath, mode, callback, position){

        var mode = mode || 0777,
            position = position || 0,
            parts = dirPath.split('/'),
            _this = this;

        parts = parts.filter(function(val) {
            if( val ) return val;
        })

        if (position >= parts.length) {
            if (callback) {
                return callback();
            } else {
                return true;
            }
        }

        var directory = parts.slice(0, position + 1).join('/');

        fs.stat(directory, function(err) {
            if (err === null) {
                _this.makeDir(dirPath, mode, callback, position + 1);
            } else {
                fs.mkdir(directory, mode, function (err) {
                    if (err) {
                        if (callback) {
                            return callback(err);
                        } else {
                            throw err;
                        }
                    } else {
                        _this.makeDir(dirPath, mode, callback, position + 1);
                    }
                })
            }
        })
    },

    /**
     * Delete folder recursive
     * @param pathItem{String} String like '/img/blog'
     * @param callback {Function}
     * */
    removeDir: function(pathItem, callback){
        var _this = this;

        async.waterfall([

            //check path
            function(callback){
                fs.exists(pathItem, function(exists){
                    if(exists){
                        callback(null, true);
                    }else{
                        callback(null, false);
                    }
                });
            },

            //get stats
            function(exists, callback){

                if(!exists) callback( new Error("Path is not found") );

                fs.stat(pathItem, function(err, stats){
                    if(err) callback(err);
                    callback(null, stats);
                })
            },

            //remove item
            function( stats, callback ){

                if( stats.isFile() ){
                    //this is file, remove file

                    fs.unlink(pathItem, function(err){
                        if(err) callback(err);
                        //stop execute
                        callback(true);
                    });
                }else if( stats.isDirectory() ) {
                    //this is directory, need scan and remove nested directory
                    fs.readdir(pathItem, function(err, list){
                        if(err) callback(err);
                        callback(null, list);
                    })
                }
            },

            function(list, callback){

                var count = list.length;
                var iterator = 0;
                if( !count ) {
                    //if folder empry - remove folder
                    fs.rmdir(pathItem, function(err){
                        if(err) callback(err);
                        callback(null);
                    })
                }else{
                    //remove all content from folder and then remove folder
                    async.whilst(
                        function () { return iterator < count; },
                        function (callback) {

                            var file = list[iterator];
                            var internalPath = pathItem + "/" + file;

                            fs.stat(internalPath, function(err, stats){
                                if(err) callback(err);

                                if(stats.isFile()){
                                    fs.unlink(internalPath, function(err){
                                        if(err) callback(err);
                                        iterator++;
                                        callback(null);
                                    });
                                }else if( stats.isDirectory() ){
                                    _this.removeDir(internalPath, function(err){
                                        if(err) callback(err);
                                        iterator++;
                                        callback(null);
                                    });
                                }

                            });

                        },
                        function (err) {
                            if(err) callback(err);

                            fs.rmdir(pathItem, function(err){
                                if(err) callback(err);
                                callback(null);
                            })
                        }
                    );
                }

            }

        ], function(err){

            if(err){
                if( err === true ){
                    callback(null);
                }else{
                    callback(err);
                }
            }else{
                callback(null);
            }


        })
    },


    removeDirs: function(paths, callback){
        var _this = this,
            i,
            max = paths.length;

        var methods = [];
        for ( i = 0; i < max; i++) {
            (function(path){
                methods.push(function(callback) {
                    _this.removeDir(path, function(err){
                        console.log(1);
                        if(err) {
                            callback(err);
                            return;
                        }

                        callback(null);
                    });
                });
            })(paths[i]);
        }

        async.parallel(methods, function(err) {

            if(err) {
                callback(err);
                return;
            }

            callback(err);
        })
    },

    //renameFolder
    rename: function(dirPath, newName, cb){

        async.waterfall([

            //check path
            function(callback){
                fs.exists(dirPath, function(exists){
                    if(exists){
                        callback(null, true);
                    }else{
                        callback(null, false);
                    }
                });
            },

            //rename
            function(exists, callback){

                if(!exists) callback( new Error("Path is not found") );

                var parts = dirPath.split('/').filter(function(val) {if( val ) return val;});
                var oldName = parts.pop();

                var oldPath = root + "/" + parts.join('/') + "/" + oldName;
                var newPath = root + "/" + parts.join('/') + "/" + newName;

                fs.rename(oldPath, newPath, function(err){
                    if(err) callback(err);
                    callback(null);
                })
            },

        ], function(err){
            if(err) callback(err);
            callback(null);
        })
    }
})
/*var fsWoker = new FsWorker();

 fsWoker.listDir('/img/blog/default/123', function(err, list){
 });*/

module.exports = FsWorker;

/*

 fsWoker.rename('/some/New Text Document.txt', "newName", function(err){
 console.log(err)
 });

 fsWoker.rename('/some/test/rename', "newName", function(err){
 console.log(err)
 });

 fsWoker.removeDir('/some');

 fsWoker.makeDir('/some/test/plugins');

 fsWoker.listDir("/", function(err, done){
 console.log(err);
 console.log(done);
 })

 fsWoker.listDirWithInfo("/", function(err, done){
 console.log(err);
 console.log(done);
 })

 */