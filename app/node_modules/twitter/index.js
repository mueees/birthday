var T = require("./twitterSteram").T, // twitter constructor
    _ = require("underscore"),
    filterTweet = require('./filter/default'),
    socketServer = require("socketServer/worker");

var count = 0;

var opts = {
    whiteListParametres: ["track", "language", "people"],
    defaultStream: {
        track: ['javascript', 'nodejs', 'js']
    }
}

function Twitter(){
    this.twitterStream = null;
    this.streamState = false;
    _.bindAll(this, "subscribe", "getNewTweet", "changeChannel");
    this.init();
}

Twitter.prototype = {

    init: function(){
        this.createStream(opts.defaultStream);
    },

    subscribe: function(req, res, next){
        socketServer.addStreamToClientChannel("twitter:newTweet", res.idStream);
        res.send();
    },

    unsubscribe: function(req, res, next){
        socketServer.removeStreamToClientChannel("twitter:newTweet", res.idStream);
        res.send();
    },

    createStream: function(data){
        var _this = this;
        this.stopStream();

        var options = this.createOptionsForStream(data);

        this.twitterStream = T.stream('statuses/filter', options);
        this.twitterStream.on('tweet', function(tweet){
            _this.getNewTweet(tweet);
        });

        this.streamState = true;
    },

    //todo: добавить построение options по переданным параметрам
    createOptionsForStream: function(data){
        return data;
    },

    changeChannel: function( req, res, next ){
        var data = req.getData();

        //todo добавить data.key для публичной демонстрации
        /*if( !data.key ){
            next(new Error('Key is necessary for change channel'));
        }*/

        //todo: валидация необходимых данный отправленных клиентом
        this.createStream(data);

        res.send();
    },

    stopStream: function(){
        if( !this.streamState ) return false;

        this.twitterStream.off();
        this.twitterStream.close();
        this.twitterStream = null;
        this.streamState = false;
    },

    getNewTweet: function(tweet){
        //todo: добавить фильтрацию входящих твитов

        for( var name in filterTweet ){
            if(!filterTweet[name](tweet) ) {
                count++;
                console.log(count, name)
                console.log(tweet.text)
                return false
            };
        } 
        

        /*
            игнорировать заданный список аккаунтов;
            игнорировать сообщения с переизбытком хештегов.
        */

        //необходимо присылать
        //https://dev.twitter.com/docs/platform-objects/tweets
        /*

        coordinates
        created_at

        entities (парсить и заменять весь текст на ссылки )
        favorite_count (как много юзером сделало этот твит favorite)
        id (id твита)
        lang
        retweet_count
        text
        user.profile_image_url
        user.screen_name
        user.lang
        user.followers_count
        */


        //в канал сервера комманда toClientChannel,
        //всем stream, которые зарегестрировались в канале twitter:newTweet, для получения новых
        //твитов, выслать новый твит

        socketServer.channel.emit("toClientChannel", {
            params: tweet,
            channel: "twitter:newTweet"
        });
    }

}

module.exports = new Twitter();