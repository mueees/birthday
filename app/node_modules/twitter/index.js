var T = require("./twitterSteram").T, // twitter constructor
    _ = require("underscore"),
    websocketChannel = ('websocketServer/channel');

var opts = {
    maxListeners: 0,
    whiteListParametres: ["track", "language", "people"],
    defaultStream: {
        track: ['javascript', 'usa', 'fun']
    }
}

function Twitter(){
    this.listeners = [];
    this.twitterStream = null;

    /*
     Работает ли стрим с твиттера.
     Если нет подключенных пользователей, то stream не работает.
     */
    this.streamState = false;
    _.bindAll(this, "addListener", "getNewTweet", "changeChannel");
}

Twitter.prototype = {

    addListener: function(req, res, next){
        if( opts.maxListeners !== 0 && this.listeners.length >= opts.maxListeners ){
            next( new Error("Limit listeners") );
            return false;
        }

        if( this.listeners.length == 0 ){
            //this.createStream(opts.defaultStream);
        }

        this.listeners.push(res.conn);
        req.send();
    },

    createStream: function(data){
        var _this = this;
        this.stopStream();

        var options = this.createOptionsForStream(data);

        this.twitterStream = T.stream('statuses/filter', options);
        this.twitterStream.on('tweet', function(tweet){
            _this.getNewTweet(tweet);
        });

        this.streamState = true;
    },

    //todo: добавить построение options по переданным параметрам
    createOptionsForStream: function(data){
        return data;
    },

    changeChannel: function( req ){
        console.log(res);
        var data = req.getData();

        //todo добавить data.key для публичной демонстрации
        /*if( !data.key ){
            next(new Error('Key is necessary for change channel'));
        }*/

        //todo: валидация необходимых данный отправленных клиентом
        this.createStream(data);

        req.send();
    },

    stopStream: function(){
        if( !this.streamState ) return false;

        this.twitterStream.off();
        this.twitterStream.close();
        this.twitterStream = null;
        this.streamState = false;
    },

    getNewTweet: function(tweet){

        //todo: добавить фильтрацию входящих твитов
        var i, max = this.listeners.length;

        var message = {
            data: tweet,
            channel: "twitter:newTweet"
        }

        for( i = 0; i < max; i++ ){
            this.listeners[i].write( message );
        }

    }

}

module.exports = new Twitter();