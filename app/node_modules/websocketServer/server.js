var sockjs = require('sockjs');
var _ = require('underscore');
var Request = require("./Request");

function WebSocketServer(server, crossroads){
	this.connection = [];

    this.httpServer = server;
    this.crossroads = crossroads;

	this.init();
}

WebSocketServer.prototype = {
	init: function(){
        var _this = this;

		this.sockjsServer = sockjs.createServer();
        this.sockjsServer.installHandlers(this.httpServer, {prefix:'/socket'});

		this.sockjsServer.on("connection", function(conn){
            _this.onConnection(conn);
        });
	},

    onConnection: function(conn){

        var _this = this;
		this.connection.push(conn);

		conn.on('data', function(message){
            _this.onData(message, conn);
        });

        conn.on('close', function(){
            _this.onCloseConn();
        });
	},

	onData: function( message, conn ){
        var data;

		try{
            data = JSON.parse(message);
        }catch(e){
            conn.write( JSON.stringify( this.error.invalidRequest ) );
        }

        //send message to log system
        //validate message

        var req = new Request(data.method, data.params, data.id, conn);
        var res = _.bind(req.res.getData, req);
        var next = _.bind(req.next, req);
        this.crossroads.parse( req.method, [res, req, next]  );

	},

	onCloseConn: function(){},

    error: {
        "invalidRequest": {"error": {"code": -32600, "message": "Invalid Request"}, "id": null}
    }

}

module.exports = WebSocketServer;