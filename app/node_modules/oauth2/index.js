var oauth2orize = require('oauth2orize')
    , passport = require('passport')
    , login = require('connect-ensure-login')
    , logger = require('libs/log')(module)
    , db = require('db')
    , ClientModel = require('models/auth/client')
    , AccessTokenModel = require('models/auth/accessToken')
    , crypto = require('crypto')
    , utils = require('libs/utils');

// create OAuth 2.0 server
var server = oauth2orize.createServer();

// Register serialialization and deserialization functions.
//
// When a client redirects a user to user authorization endpoint, an
// authorization transaction is initiated.  To complete the transaction, the
// user must authenticate and approve the authorization request.  Because this
// may involve multiple HTTP request/response exchanges, the transaction is
// stored in the session.
//
// An application must supply serialization functions, which determine how the
// client object is serialized into the session. Typically this will be a
// simple matter of serializing the client's ID, and deserializing by finding
// the client by ID from the database.

server.serializeClient(function(client, done) {
    return done(null, client._id);
});

server.deserializeClient(function(id, done) {
    ClientModel.findById(id, function(err, client){
        if (err) { return done(err); }
        return done(null, client);
    })
});

// Register supported grant types.
//
// OAuth 2.0 specifies a framework that allows users to grant client
// applications limited access to their protected resources.  It does this
// through a process of the user granting access, and the client exchanging
// the grant for an access token.

// Grant authorization codes.  The callback takes the `client` requesting
// authorization, the `redirectURI` (which is used as a verifier in the
// subsequent exchange), the authenticated `user` granting access, and
// their response, which contains approved scope, duration, etc. as parsed by
// the application.  The application issues a code, which is bound to these
// values, and will be exchanged for an access token.

server.grant(oauth2orize.grant.code(function(client, redirectURI, member, ares, done) {
    var tokenValue = crypto.randomBytes(32).toString('base64');
    logger.info( 'AccessToken created: ' + tokenValue );

    /*remove assecc tokenValue for this memberId and clietntId*/
    AccessTokenModel.remove({ memberId: member._id, clientId: client.clientId }, function (err) {
        if (err) return done(err);
        logger.info( 'AccessTokenModel for client "' + client.name + '" and user "' + member.name + '" was deleted' );
    });

    /*create and save new access token*/
    var token = new AccessTokenModel({ token: tokenValue, clientId: client.clientId, memberId: member._id });
    token.save(function(err){
        if (err) { return done(err); }
        done(null, tokenValue, null, { 'expires_in': config.get('tokenLife') });
    })
}));


// user decision endpoint
//
// `decision` middleware processes a user's decision to allow or deny access
// requested by a client application.  Based on the grant type requested by the
// client, the above grant middleware configured above will be invoked to send
// a response.

exports.decision = [
    /*login.ensureLoggedIn(),*/
    server.decision()
]

// user authorization endpoint
//
// `authorization` middleware accepts a `validate` callback which is
// responsible for validating the client making the authorization request.  In
// doing so, is recommended that the `redirectURI` be checked against a
// registered value, although security requirements may vary accross
// implementations.  Once validated, the `done` callback must be invoked with
// a `client` instance, as well as the `redirectURI` to which the user will be
// redirected after an authorization decision is obtained.
//
// This middleware simply initializes a new authorization transaction.  It is
// the application's responsibility to authenticate the user and render a dialog
// to obtain their approval (displaying details about the client requesting
// authorization).  We accomplish that here by routing through `ensureLoggedIn()`
// first, and rendering the `dialog` view.

exports.authorization = [
    /*login.ensureLoggedIn(),*/
    server.authorization(function(clientId, redirectURI, done) {
        ClientModel.findOne({"clientId": clientId}, function(err, client){
            if(err){ return done(err); }
            if(!client) { return done(null, false);}

            //logger.info('authorization: client was fined');
            return done(null, client, redirectURI);
        })
    }),
    function(req, res){
        //logger.info('authorization: reqsponse was sended');
        res.render("auth/autorization", { transactionID: req.oauth2.transactionID, user: req.user, client: req.oauth2.client });
    }
];

// token endpoint
//
// `token` middleware handles client requests to exchange authorization grants
// for access tokens.  Based on the grant type being exchanged, the above
// exchange middleware will be invoked to handle the request.  Clients must
// authenticate when making requests to this endpoint.

exports.token = [
    passport.authenticate(['basic', 'oauth2-client-password'], { session: false }),
    server.token(),
    server.errorHandler()
]

