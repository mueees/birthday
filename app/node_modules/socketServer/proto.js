//add request handler
var SocketServer = {};

SocketServer.use = function(route, fn){

    // default route to '/'
    if ('string' != typeof route) {
        fn = route;
        route = '/';
    }

    // strip trailing slash
    if ('/' == route[route.length - 1]) {
        route = route.slice(0, -1);
    }

    // Ensure leading slash
    if ('/' != route[0]) {
        route = '/' + route;
    }

    // add the middleware
    this.stack.push({ route: route, handle: fn });

    return this;

}

//request middleware loop
SocketServer.handle = function( req, res, out ){

    var stack = this.stack,
    index = 0;

    function next(err){
        var layer,
        path;

        //выбираем новый middleware
        //{ route: route, handle: fn }
        layer = stack [index++];
        
        if( !layer ){

            // delegate to parent
            if (out) return out(err);

            // unhandled error
            if(err){
                res.send({
                    error: {
                        status: 500,
                        message: err
                    }
                })
            }else{
                res.send({
                    error: {
                        status: 500,
                        message: "Undefined problem"
                    }
                })
            }
            return false;
        }

        try{
            path = req.method;
            if (undefined == path) path = '/';

            // Ensure leading slash
            if ('/' != req.method[0]) {
                req.method = '/' + req.method;
            }

            // skip this layer if the route doesn't match.
            if( 0 != path.toLowerCase().indexOf(layer.route.toLowerCase()) ) return next(err);

            var countArguments = layer.handle.length;
            if (err) {
                if (countArguments === 4) {
                    layer.handle(err, req, res, next);
                } else {
                    next(err);
                }
            } else if (countArguments < 4) {
                layer.handle(req, res, next);
            } else {
                next();
            }

        }catch(e){
            next(e);
        }

    }

    next();

}

module.exports = SocketServer;